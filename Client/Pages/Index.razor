@page "/"
@using SearchEngine.Shared
@inject HttpClient Http
@inject IJSRuntime Js

<PageTitle>Search Engine</PageTitle>

<div class="search-bar">
    <EditForm Model="@_searchModel" OnSubmit="@Search" style="display: flex; max-width: 650px; margin: 0 auto;">
        <InputText @bind-Value="_searchModel.Query" style="flex-grow: 1; padding: 8px; font-size: 16px; box-sizing: border-box;"/>
        <button type="submit" style="padding: 8px 16px; font-size: 16px; white-space: nowrap;">Submit</button>
    </EditForm>
</div>
<div class="main">
    @if (_documents == null)
    {
        if (_message != null)
        {
            <p class="section" style="text-align: center;"><em>@_message</em></p>
        }
        else
        {
            <p class="section" style="text-align: center;"><em>Loading...</em></p>
        }
    }
    else
    {
        if (_message != null)
        {
            <div class="section">
                <p style="text-align: center;"><em>@_message</em></p>
                <hr/>
            </div>
        }
        @foreach (SearchDocument document in _documents)
        {
            <div class="section">
                <h1><a href="https://arxiv.org/abs/@document.ArXivId" target="_blank">@document.Title</a></h1>
                <b>@MarkupAuthors(document)</b>
                <p>@document.FormatUpdated()</p>
                @if (document.IndexId != null)
                {
                    <button style="margin-bottom: 15px;" @onclick="() => Search(document)">Related Papers</button>
                }
                <p style="text-align: justify">@document.Summary</p>
                <hr/>
            </div>
        }
        @if (_moreButton)
        {
            <button class="section" @onclick="More">Load More</button>
        }
    }
</div>

@code
{
    /// <summary>
    /// The base query to be made.
    /// </summary>
    private static readonly string QueryBase = $"SearchEngine?count={Values.SearchCount}";
    
    /// <summary>
    /// The documents that have been loaded.
    /// </summary>
    private List<SearchDocument>? _documents;

    /// <summary>
    /// The input for searching.
    /// </summary>
    private readonly SearchModel _searchModel = new();

    /// <summary>
    /// The ID of the paper to load similar papers to.
    /// </summary>
    private ulong? _id;

    /// <summary>
    /// An optional message to display to the user.
    /// </summary>
    private string? _message;

    /// <summary>
    /// The last query that was run.
    /// </summary>
    private string? _lastQuery;

    /// <summary>
    /// If the button to load more should be shown or not.
    /// </summary>
    private bool _moreButton;

    /// <summary>
    /// Called when the page loads.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        // Run an empty search, just getting the top relevant documents.
        await Search();
    }

    /// <summary>
    /// Called when the page has updated rendering.
    /// </summary>
    /// <param name="firstRender">If this is the first render or not.</param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            await Js.InvokeVoidAsync("fade");
        }
        
        await base.OnAfterRenderAsync(firstRender);
    }

    /// <summary>
    /// Search for related documents by passing the document ID.
    /// </summary>
    /// <param name="document">The ID to find related documents for.</param>
    private async Task Search(SearchDocument document)
    {
        // Can't do anything if there is no indexed value.
        if (document.IndexId == null)
        {
            return;
        }
        
        // Search for similar documents.
        _searchModel.Query = string.Empty;
        _id = document.IndexId;
        _documents = null;
        _message = null;
        _lastQuery = null;
        _moreButton = false;
        QueryResult? result = await Http.GetFromJsonAsync<QueryResult>($"{QueryBase}&id={_id}");
        
        // If there was an error, just keep the current document.
        if (result == null || result.SearchDocuments.Count < 1)
        {
            _documents = new() {document};
            return;
        }

        // Enable the button if the full amount of results got returned, as otherwise we have reached the end.
        _moreButton = result.SearchDocuments.Count >= Values.SearchCount;

        // Show similar documents, ensuring the document we searched for is at the top of the page.
        List<SearchDocument> composed = new() {document};
        composed.AddRange(result.SearchDocuments.Where(x => x.IndexId != document.IndexId));
        _documents = composed;
    }

    /// <summary>
    /// Search for documents.
    /// </summary>
    private async Task Search()
    {
        string url = QueryBase;

        bool hasQuery = !string.IsNullOrWhiteSpace(_searchModel.Query);
        // If the query is not empty, set it for our API.
        if (hasQuery)
        {
            url += $"&query={_searchModel.Query}";
            _lastQuery = _searchModel.Query;
        }
        else
        {
            _lastQuery = null;
        }
        
        // Clear the existing documents and then get the new documents.
        _id = null;
        _documents = null;
        _message = null;
        _moreButton = false;
        QueryResult? result = await Http.GetFromJsonAsync<QueryResult>(url);
        
        // If nothing was returned, there was an error.
        if (result == null)
        {
            _message = $"Error getting results for \"{_searchModel.Query}\".";
            return;
        }

        // If the returned results were due to a corrected query, set it so loading more works proper.
        if (result.CorrectedQuery != null)
        {
            _lastQuery = result.CorrectedQuery;
        }
        
        // If nothing was returned, display an error message.
        if (result.SearchDocuments.Count < 1)
        {
            _message = result.CorrectedQuery == null
                ? $"No results for \"{_searchModel.Query}\"."
                : $"No results for \"{_searchModel.Query}\" or \"{result.CorrectedQuery}\".";

            return;
        }

        // If results were returned as a result of the query being corrected, state this.
        if (result.CorrectedQuery != null)
        {
            _message = $"No results for \"{_searchModel.Query}\"; showing results for \"{result.CorrectedQuery}\".";
        }

        // Set the new documents.
        _documents = result.SearchDocuments;
        
        // Enable the button if the full amount of results got returned, as otherwise we have reached the end.
        _moreButton = _documents.Count >= Values.SearchCount;
    }

    /// <summary>
    /// Load more results.
    /// </summary>
    private async Task More()
    {
        if (!_moreButton)
        {
            return;
        }
        
        // Continue from where we have left off with our current results.
        string url = $"{QueryBase}&start={_documents?.Count ?? 0}";
        
        // If this has an ID for a document, load more similar documents.
        if (_id == null)
        {
            url += $"&id={_id}";
            _searchModel.Query = string.Empty;
        }
        else if (!string.IsNullOrWhiteSpace(_lastQuery))
        {
            url += $"&query={_lastQuery}";
        }
        else if (!string.IsNullOrWhiteSpace(_searchModel.Query))
        {
            url += $"&query={_searchModel.Query}";
        }

        // Load more documents.
        _moreButton = false;
        QueryResult? result = await Http.GetFromJsonAsync<QueryResult>(url);
        
        // If there was an error or no other documents were returned, there is nothing to do.
        if (result == null || result.SearchDocuments.Count < 1)
        {
            return;
        }

        // Add all new documents to the list (this check is realistically just a failsafe).
        _documents ??= new();
        foreach (SearchDocument document in result.SearchDocuments.Where(document => !_documents.Exists(x => x.ArXivId == document.ArXivId)))
        {
            _documents.Add(document);
        }

        // Enable the button if the full amount of results got returned, as otherwise we have reached the end.
        _moreButton = result.SearchDocuments.Count >= Values.SearchCount;
    }

    /// <summary>
    /// Create markup authors in case "et al." is passed.
    /// </summary>
    /// <param name="document">The document to get the authors for.</param>
    /// <returns>Markup authors.</returns>
    private static MarkupString MarkupAuthors(SearchDocument document)
    {
        return new(document.FormatAuthors(true));
    }
    
    /// <summary>
    /// Helper for building the form to submit the search.
    /// </summary>
    public class SearchModel
    {
        /// <summary>
        /// The query from the user.
        /// </summary>
        public string Query { get; set; } = string.Empty;
    }
}